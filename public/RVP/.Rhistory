cex.axis=1, cex.main=1.25, cex.sub=1.5, yaxs="i")
axis(side = 1, at = r.n1)
#points(r.n1, eslass1, type="b", pch=18, lty=2, col="gray30")
points(r.n1, trlass2, type="b", pch=20, col=25, lty=1)
points(r.n1, trlass3, type="b", pch=22, col=26, lty=3)
points(r.n1, cvlass1, type="b", pch=23,  col=37,lty=2)
points(r.n1, cvlass2, type="b", pch=24, col=43, lty=5)
points(r.n1, cvlass3, type="b", pch=25, col=46, lty=6)
#abline(h=1/120, lwd=2, lty=5)
legend(.2, 1.2, legend = c("ETrLasso(1)", "ETrLasso(2)", "ETrLasso(3)",
"ECVLasso(1)", "ECVLasso(2)", "ECVLasso(3)" ), bty = "n",
lwd = c(1, 1, 1, 1,1,1,1), x.intersp=0.4, yjust=0.1,xjust=0.3,cex = 1,seg.len=5,
col = c(8,25,26,37,43,46), lty = c(4,1,3,2,5,6),
pch = c(23, 20,22,23,24,25),xpd = TRUE)
abline(h=1, lwd=1, lty=1)
####### Normal 2
r.n1<-scan()
trlass1<-scan()
trlass2<-scan()
trlass3<-scan()
cvlass1<-scan()
cvlass2<-scan()
cvlass3<-scan()
plot(r.n1, trlass1, type="b", ylim=c(0.6, 1.4),
col=8, xaxt="n",  pch=23,
lty=4, ylab="R(MSPE)", xlab="r/p", main="", cex.lab=1,
cex.axis=1, cex.main=1.25, cex.sub=1.5, yaxs="i")
axis(side = 1, at = r.n1)
#points(r.n1, eslass1, type="b", pch=18, lty=2, col="gray30")
points(r.n1, trlass2, type="b", pch=20, col=25, lty=1)
points(r.n1, trlass3, type="b", pch=22, col=26, lty=3)
points(r.n1, cvlass1, type="b", pch=23,  col=37,lty=2)
points(r.n1, cvlass2, type="b", pch=24, col=43, lty=5)
points(r.n1, cvlass3, type="b", pch=25, col=46, lty=6)
#abline(h=1/120, lwd=2, lty=5)
legend(.2, 1.2, legend = c("ETrLasso(1)", "ETrLasso(2)", "ETrLasso(3)",
"ECVLasso(1)", "ECVLasso(2)", "ECVLasso(3)" ), bty = "n",
lwd = c(1, 1, 1, 1,1,1,1), x.intersp=0.4, yjust=0.1,xjust=0.3,cex = 1,seg.len=5,
col = c(8,25,26,37,43,46), lty = c(4,1,3,2,5,6),
pch = c(23, 20,22,23,24,25),xpd = TRUE)
abline(h=1, lwd=1, lty=1)
r.n1<-scan()
trlass1<-scan()
trlass2<-scan()
trlass3<-scan()
cvlass1<-scan()
cvlass2<-scan()
cvlass3<-scan()
plot(r.n1, trlass1, type="b", ylim=c(0.6, 1.4),
col=8, xaxt="n",  pch=23,
lty=4, ylab="R(MSPE)", xlab="r/p", main="", cex.lab=1,
cex.axis=1, cex.main=1.25, cex.sub=1.5, yaxs="i")
axis(side = 1, at = r.n1)
#points(r.n1, eslass1, type="b", pch=18, lty=2, col="gray30")
points(r.n1, trlass2, type="b", pch=20, col=25, lty=1)
points(r.n1, trlass3, type="b", pch=22, col=26, lty=3)
points(r.n1, cvlass1, type="b", pch=23,  col=37,lty=2)
points(r.n1, cvlass2, type="b", pch=24, col=43, lty=5)
points(r.n1, cvlass3, type="b", pch=25, col=46, lty=6)
#abline(h=1/120, lwd=2, lty=5)
legend(.2, 1.2, legend = c("ETrLasso(1)", "ETrLasso(2)", "ETrLasso(3)",
"ECVLasso(1)", "ECVLasso(2)", "ECVLasso(3)" ), bty = "n",
lwd = c(1, 1, 1, 1,1,1,1), x.intersp=0.4, yjust=0.1,xjust=0.3,cex = 1,seg.len=5,
col = c(8,25,26,37,43,46), lty = c(4,1,3,2,5,6),
pch = c(23, 20,22,23,24,25),xpd = TRUE)
abline(h=1, lwd=1, lty=1)
####### Normal D
r.n1<-scan()
trlass1<-scan()
trlass2<-scan()
trlass3<-scan()
cvlass1<-scan()
cvlass2<-scan()
cvlass3<-scan()
plot(r.n1, trlass1, type="b", ylim=c(0.6, 1.4),
col=8, xaxt="n",  pch=23,
lty=4, ylab="R(MSPE)", xlab="r/p", main="", cex.lab=1,
cex.axis=1, cex.main=1.25, cex.sub=1.5, yaxs="i")
axis(side = 1, at = r.n1)
#points(r.n1, eslass1, type="b", pch=18, lty=2, col="gray30")
points(r.n1, trlass2, type="b", pch=20, col=25, lty=1)
points(r.n1, trlass3, type="b", pch=22, col=26, lty=3)
points(r.n1, cvlass1, type="b", pch=23,  col=37,lty=2)
points(r.n1, cvlass2, type="b", pch=24, col=43, lty=5)
points(r.n1, cvlass3, type="b", pch=25, col=46, lty=6)
#abline(h=1/120, lwd=2, lty=5)
legend(.2, 1.2, legend = c("ETrLasso(1)", "ETrLasso(2)", "ETrLasso(3)",
"ECVLasso(1)", "ECVLasso(2)", "ECVLasso(3)" ), bty = "n",
lwd = c(1, 1, 1, 1,1,1,1), x.intersp=0.4, yjust=0.1,xjust=0.3,cex = 1,seg.len=5,
col = c(8,25,26,37,43,46), lty = c(4,1,3,2,5,6),
pch = c(23, 20,22,23,24,25),xpd = TRUE)
abline(h=1, lwd=1, lty=1)
####### Normal E
r.n1<-scan()
? scan
####### Normal E
r.n1<-scan()
trlass1<-scan()
trlass2<-scan()
trlass3<-scan()
cvlass1<-scan()
cvlass2<-scan()
cvlass3<-scan()
plot(r.n1, trlass1, type="b", ylim=c(0.6, 1.4),
col=8, xaxt="n",  pch=23,
lty=4, ylab="R(MSPE)", xlab="r/p", main="", cex.lab=1,
cex.axis=1, cex.main=1.25, cex.sub=1.5, yaxs="i")
axis(side = 1, at = r.n1)
#points(r.n1, eslass1, type="b", pch=18, lty=2, col="gray30")
points(r.n1, trlass2, type="b", pch=20, col=25, lty=1)
points(r.n1, trlass3, type="b", pch=22, col=26, lty=3)
points(r.n1, cvlass1, type="b", pch=23,  col=37,lty=2)
points(r.n1, cvlass2, type="b", pch=24, col=43, lty=5)
points(r.n1, cvlass3, type="b", pch=25, col=46, lty=6)
#abline(h=1/120, lwd=2, lty=5)
legend(.2, 1.2, legend = c("ETrLasso(1)", "ETrLasso(2)", "ETrLasso(3)",
"ECVLasso(1)", "ECVLasso(2)", "ECVLasso(3)" ), bty = "n",
lwd = c(1, 1, 1, 1,1,1,1), x.intersp=0.4, yjust=0.1,xjust=0.3,cex = 1,seg.len=5,
col = c(8,25,26,37,43,46), lty = c(4,1,3,2,5,6),
pch = c(23, 20,22,23,24,25),xpd = TRUE)
abline(h=1, lwd=1, lty=1)
plot(r.n1, trlass1, type="b", ylim=c(0.6, 1.4),
col=8, xaxt="n",  pch=23,
lty=4, ylab="R(MSPE)", xlab="r/p", main="", cex.lab=1,
cex.axis=1, cex.main=1.25, cex.sub=1.5, yaxs="i")
axis(side = 1, at = r.n1)
#points(r.n1, eslass1, type="b", pch=18, lty=2, col="gray30")
points(r.n1, trlass2, type="b", pch=20, col=25, lty=1)
points(r.n1, trlass3, type="b", pch=22, col=26, lty=3)
points(r.n1, cvlass1, type="b", pch=23,  col=37,lty=2)
points(r.n1, cvlass2, type="b", pch=24, col=43, lty=5)
points(r.n1, cvlass3, type="b", pch=25, col=46, lty=6)
abline(h=1, lwd=1, lty=1)
library(AnthroTools)
install.packages("AnthroTools")
library(languageserver, lib.loc = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
remove.packages("languageserver", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("reshape2", "ggdendro", "data.table"))
relations <- data.frame(fread('~/Desktop/relatedness.relatedness2'))
library(data.table)
library(reshape2)
library(ggdendro)
relations <- data.frame(fread('~/Desktop/relatedness.relatedness2'))
relate <- relations[,c("INDV1","INDV2","RELATEDNESS_PHI")]
rel <- dcast(relate, INDV1~INDV2)
row.names(rel)<-rel$INDV1
rel <- rel[,-1]
rel
d <- dist(as.matrix(rel))
hc <- hclust(d)
ggdendrogram(hc, size=12)
pdf('relatedness.pdf',width=8,height=6)
ggdendrogram(hc, size=12)
dev.off()
getwd()
install.packages(c("coin", "DescTools", "ggsignif", "libcoin", "multcomp", "pixmap", "rcompanion", "rstatix", "segmented"))
install.packages(c("coin", "DescTools", "ggsignif", "libcoin", "multcomp", "pixmap", "rcompanion", "rstatix", "segmented"))
View(rel)
install.packages(c("coin", "DescTools", "ggsignif", "libcoin", "multcomp", "pixmap", "rcompanion", "rstatix", "segmented"))
install.packages(c("coin", "DescTools", "ggsignif", "libcoin", "multcomp", "pixmap", "rcompanion", "rstatix", "segmented"))
install.packages(c("coin", "DescTools", "ggsignif", "libcoin", "multcomp", "pixmap", "rcompanion", "rstatix", "segmented"))
install.packages(c("coin", "DescTools", "ggsignif", "libcoin", "multcomp", "pixmap", "rcompanion", "rstatix", "segmented"))
install.packages(c("rstatix", "segmented"))
unque
unique
unique(runif(10))
install.packages("performance")
library(performance)
install.packages("xgboost")
library(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
dtrain <- xgb.DMatrix(agaricus.train$data, label = agaricus.train$label)
dtest <- xgb.DMatrix(agaricus.test$data, label = agaricus.test$label)
watchlist <- list(train = dtrain, eval = dtest)
watchlist
watchlist$eval
watchlist
watchlist$train
dtrain
dtrain
dtrain$xgb.DMatrix
dtrain$xgb.DMatrix
dtrain
xgb.DMatrix\
xgb.DMatrix
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
train
test
bst <- xgboost(data = train$data, label = train$label, max_depth = 2,
eta = 0.5, nthread = 2, nrounds = 5, objective = "binary:logistic")
# use all trees by default
pred <- predict(bst, test$data)
pred
bst <- xgboost(data = train$data, label = train$label, max_depth = 2,
eta = 0.5, nthread = 2, nrounds = 5)
bst <- xgboost(data = train$data, label = train$label, max_depth = 2,
eta = 0.5, nthread = 2, nrounds = 5)
bst <- xgboost(data = train$data, label = train$label, max_depth = 2,
eta = 0.5, nthread = 2, nrounds = 5)
predict(bst, test$data)
predict(bst, test$data, ntreelimit = 1)
bst <- xgboost(data = train$data, label = train$label)
bst <- xgboost(data = train$data, label = train$label, nrounds = 5)
# use all trees by default
pred <- predict(bst, test$data)
lb <- as.numeric(iris$Species) - 1
lb
num_class <- 3
bst <- xgboost(data = as.matrix(iris[, -5]), label = lb,
max_depth = 4, eta = 0.5, nthread = 2, nrounds = 10, subsample = 0.5,
objective = "multi:softprob", num_class = num_class)
# predict for softmax returns num_class probability numbers per case:
pred <- predict(bst, as.matrix(iris[, -5]))
pred
pred
lb
num_class
as.matrix(iris[, -5])
pred
str(pred)
matrix(pred, ncol=num_class, byrow=TRUE)
0.982156694+0.012464383+0.005378947
pred <- matrix(pred, ncol=num_class, byrow=TRUE)
# convert the probabilities to softmax labels
pred_labels <- max.col(pred) - 1
pred_labels
agaricus.train
# the following should result in the same error as seen in the last iteration
sum(pred_labels != lb)/length(lb)
max.col(pred)
install.packages(c("coin", "DescTools", "genetics", "ggsignif", "libcoin", "multcomp", "pixmap", "rcompanion", "segmented"))
install.packages("ESKNN")
install.packages("adabag")
library(devtools)
install_github("https://github.com/cran/ESKNN")
version
.libPaths()
detach("package:usethis", unload = TRUE)
library(usethis, lib.loc = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
update.packages(ask = FALSE, repos = 'http://cran.rstudio.org')
Sys.getenv("PATH")
Sys.which("stats.dll")
update.packages(checkBuilt=TRUE)
update.packages(checkBuilt=TRUE)
library(ESKNN)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(ESKNN)
? esknnClass
data(hepatitis)
data <- hepatitis
Class <- data[,names(data)=="Class"]
data$Class<-as.factor(as.numeric(Class)-1)
train <- data[sample(1:nrow(data),0.7*nrow(data)),]
test <- data[-(sample(1:nrow(data),0.7*nrow(data))),]
ytrain<-train[,names(train)=="Class"]
xtrain<-train[,names(train)!="Class"]
xtest<-test[,names(test)!="Class"]
ytest <- test[,names(test)=="Class"]
model<-esknnClass(xtrain, ytrain,k=NULL)
model<-esknnClass(xtrain, ytrain,k=2)
model<-esknnClass(xtrain, ytrain)
model<-esknnClass(xtrain, ytrain,k=NULL)
library("pvclust")
library(FactoMineR)
library("pvclust")
library(FactoMineR)
data(lung)
cancer<-t(lung)
cancer<-cancer[-c(1,20),]
row1<-grep("Adeno",row.names(cancer), perl=TRUE, value=FALSE)
row2<-grep("normal",row.names(cancer), perl=TRUE, value=FALSE)
row3<-grep("SCLC",row.names(cancer), perl=TRUE, value=FALSE)
row4<-grep("SCC",row.names(cancer), perl=TRUE, value=FALSE)
row5<-grep("node",row.names(cancer), perl=TRUE, value=FALSE)
row6<-grep("LCLC",row.names(cancer), perl=TRUE, value=FALSE)
length(c(row1,row2,row3,row4,row5,row6))
dim(cancer)
cacancer<-NULL
cacancer[row1]<-1
cacancer[row2]<-2
cacancer[row3]<-3
cacancer[row4]<-4
cacancer[row5]<-5
cacancer[row6]<-6
cancer[cacancer==1,]
for(i in 1:(dim(cancer)[2])){
cancer[is.na(cancer[,i]),i]<-mean(cancer[,i],na.rm=TRUE)
}
cancer<-as.matrix(cancer)
Class<-cacancer
Dat<-data.frame(cbind(cancer,factor(Class)))
cacancer
#Dat[,ncol(Dat)]<-factor(Dat[,ncol(Dat)])
names(Dat)<-c(paste("c",1:916,sep=""),'Class')
ls()
rm(list = ls())
ls()
library("pvclust")
library(FactoMineR)
data(lung)
attach(lung)
cancer<-t(lung)
cancer<-cancer[-c(1,20),]
row1<-grep("Adeno",row.names(cancer), perl=TRUE, value=FALSE)
row2<-grep("normal",row.names(cancer), perl=TRUE, value=FALSE)
row3<-grep("SCLC",row.names(cancer), perl=TRUE, value=FALSE)
row4<-grep("SCC",row.names(cancer), perl=TRUE, value=FALSE)
row5<-grep("node",row.names(cancer), perl=TRUE, value=FALSE)
row6<-grep("LCLC",row.names(cancer), perl=TRUE, value=FALSE)
length(c(row1,row2,row3,row4,row5,row6))
dim(cancer)
cacancer<-NULL
cacancer[row1]<-1
cacancer[row2]<-2
cacancer[row3]<-3
cacancer[row4]<-4
cacancer[row5]<-5
cacancer[row6]<-6
cancer[cacancer==1,]
for(i in 1:(dim(cancer)[2])){
cancer[is.na(cancer[,i]),i]<-mean(cancer[,i],na.rm=TRUE)
}
cancer<-as.matrix(cancer)
Class<-cacancer
Dat<-data.frame(cbind(cancer,factor(Class)))
#Dat[,ncol(Dat)]<-factor(Dat[,ncol(Dat)])
names(Dat)<-c(paste("c",1:916,sep=""),'Class')
ls
ls()
getwd()
save(Dat,file="DNAM.RData")
install.packages("qgraph")
library(qgraph)
corMat <- cor_auto(Data)
? qgraph
data(big5)
# Compute correlation matrix:
big5_cors <- cor_auto(big5, detectOrdinal = FALSE)
data(big5groups)
data(big5groups)
# Compute correlation matrix:
big5_cors <- cor_auto(big5, detectOrdinal = FALSE)
big5_cors
big5Graph <- qgraph(cor(big5),minimum=0.25,groups=big5groups,
legend=TRUE,borders=FALSE, title = "Big 5 correlations")
# Same graph with spring layout:
qgraph(big5Graph,layout="spring")
View(big5)
library(devtools)
devtools::install_github("tshmak/lassosum")
install.packages("lassosum")
install.packages("calibrateBinary")
install.packages(c("bayestestR", "broom", "caTools", "cli", "cpp11", "dbplyr", "DescTools", "devtools", "effectsize", "gert", "gh", "insight", "parameters", "performance", "pkgload", "processx", "psych", "reprex", "RSQLite", "spatstat", "spatstat.linnet", "styler", "tinytex", "vctrs"))
install.packages("mlbench")
install.packages('tidyverse')
install.packages('caret')
gc
? gc
library(bigmemory)
install.packages("languageserver")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local", version = "3.1.1", hadoop_version = "3.2")
shiny::runGitHub('KaranHub','KaranKakouei')
shiny::runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/Data_Dashboard/test')
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
install.packages("googleVis")
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
install.packages("quantmod")
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
install.packages("forecast")
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
install.packages("textshape")
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
install.packages("rsconnect")
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
install.packages("dygraphs")
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
install.packages("tm")
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
install.packages("SnowballC")
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
install.packages("wordcloud")
runApp('/Volumes/E/onlinedrive/GoogleDrive/shakhsi/JoB0/interview/msi/archive/Shiny_SP500_Dashboard-master')
? cutree
shiny::runApp('/Volumes/F/mni/project/shiny/mni_Dashboard')
runApp('/Volumes/F/mni/project/shiny/mni_Dashboard')
shinyApp(ui, server)
shiny::runApp('Desktop/aa')
runApp('Desktop/aa')
runApp('Desktop/Untitled.R')
df <- data.frame(a=letters, b=LETTERS, x=runif(26), y=runif(26))
g <- ggplot(df, aes(x,y)) + geom_point(aes(text=sprintf('letter: %s\nLetter: %s', a, b)))
g
(gg <- ggplotly(g))
g <- ggplot(df, aes(x,y)) +
geom_point(aes(text=sprintf("letter: %s<br>Letter: %s", a, b)))
(gg <- ggplotly(g))
df <- data.frame(a=letters, b=LETTERS, x=runif(26), y=runif(26))
g <- ggplot(df, aes(x,y)) + geom_point(aes(text=sprintf('letter: %s\nLetter: %s', a, b)))
g
(gg <- ggplotly(g))
g <- ggplot(df, aes(x,y)) +
geom_point(aes(text=sprintf("letter: %s<br>Letter: %s", a, b)))
(gg <- ggplotly(g))
df
g <- ggplot(df, aes(x,y)) +
geom_point(aes(text=sprintf("letter: %s<br>Letter: %s", b)))
(gg <- ggplotly(g))
g <- ggplot(df, aes(x,y)) +
geom_point(aes(text=sprintf("Letter: %s", b)))
(gg <- ggplotly(g))
source('Desktop/Untitled.R')
library(shiny); runApp('Desktop/Untitled2.R')
runApp('Desktop/aa')
runApp('/Volumes/F/mni/project/MTS')
runApp('/Volumes/F/mni/project/MTS')
runApp('/Volumes/F/mni/project/MTS')
shiny::runApp('/Volumes/F/mni/project/MTS')
library(shiny)
library(shiny.semantic)
library(semantic.dashboard)
library(plotly)
library(DT)
install.packages(c("shiny.semantic", "semantic.dashboard"))
install.packages("leaflet")
remotes::install_github("DivadNojnarg/outstanding-shiny-ui-code")
library(OSUICode)
? OSUICode
run_dj_app()
install.packages("wavesurfer")
run_dj_app()
install.packages("wavesurfer")
install.packages("bookdown")
install.packages("bs4_book")
install.packages("bs4Dash")
remotes::install_github("rstudio/bslib")
install.packages("downlit")
remotes::install_github("rstudio/bookdown")
install.packages("tufte")
install.packages("jstools")
remotes::install_github("dreamRs/jstools")
install.packages("apexcharter")
remotes::install_github("RinteRface/charpente")
install.packages("shinyMobile")
library(OSUICode)
install.packages("leaflet.extras")
install.packages("googleLanguageR")
library(googleLanguageR)
quote <- "Two things are infinite: the universe and human stupidity; and I'm not sure about the universe."
nlp <- gl_nlp(quote)
nlp
install.packages(c("future.apply", "reprex", "rmarkdown", "rsconnect", "survival", "tinytex", "vroom", "xfun"))
shiny::runApp('/Volumes/F/mni/project/MTS/MTS _B')
runApp('/Volumes/F/mni/project/MTS/MTS _B')
shiny::runApp('/Volumes/F/mni/project/MTS/archive/MTS _B')
shiny::runApp('/Volumes/E/onlinedrive/GoogleDrive/Reseach/mni_google/MTS ')
shiny::runApp('/Volumes/F/mni/project/MTS/archive/MTS _B')
detectCores()
library(parallelly)
library(doMC)
detectCores()
library(reticulate)
library(bigrquery)
library(ggplot2)
library(ggplot2)
os <- import("os")
n
firecloud <- import("firecloud")
firecloud <- import("firecloud")
firecloud <- import("firecloud")
install.packages("import")
firecloud <- import("firecloud")
? import
firecloud <- import("firecloud")
fiss <- import("firecloud.fiss")
PROJECT <- Sys.getenv('GOOGLE_PROJECT')
os <- import("os")
os$getcwd()
WORKSPACE <- os$path$basename(os$getcwd())
BILLING_PROJECT_ID <- Sys.getenv('GOOGLE_PROJECT')
bigrquery::set_service_token(Ronaldo::getServiceAccountKey())
devtools::session_info()
install.packages(c("cpp11", "lifecycle", "mgcv", "progressr", "psych", "shiny", "styler"))
install.packages(c("adegenet", "bslib", "caret", "coin", "colourpicker", "data.table", "datawizard", "deldir", "desc", "diffobj", "effectsize", "emmeans", "fitdistrplus", "gstat", "Hmisc", "hms", "htmlTable", "insight", "knitr", "libcoin", "lubridate", "mgcv", "mime", "optparse", "party", "performance", "pillar", "pkgload", "plotly", "questionr", "R.utils", "raster", "RcppArmadillo", "recipes", "remotes", "rootSolve", "rvest", "s2", "sf", "shiny", "shinydashboard", "spatstat.geom", "testthat", "TH.data", "tibble", "tidyr", "tinytex", "usethis", "waiter"))
reticulate::repl_python()
use_python('/usr/local/Cellar/python@3.9/3.9.7_1/bin//python3', required = TRUE)
use_python('/usr/local/Cellar/python@3.9/3.9.7_1/bin//python3', required = TRUE)
library(reticulate)
use_virtualenv('r-reticulate')
use_python('/usr/local/Cellar/python@3.9/3.9.7_1/bin//python3', required = TRUE)
knitr::opts_chunk$set(fig.width=8, fig.height=4, fig.path='Figs/',
warning=FALSE, message=FALSE)
reticulate::repl_python()
library(reticulate)
use_virtualenv('r-reticulate')
use_python('/usr/local/Cellar/python@3.9/3.9.7_1/bin//python3', required = TRUE)
library(reticulate)
use_virtualenv('r-reticulate')
use_python('/usr/local/Cellar/python@3.9/3.9.7_1/bin//python3', required = TRUE)
library(reticulate)
use_virtualenv('r-reticulate')
use_python('/usr/local/Cellar/python@3.9/3.9.7_1/bin//python3', required = TRUE)
