crimemtl<- read.csv("http://donnees.ville.montreal.qc.ca/dataset/5829b5b0-ea6f-476f-be94-bc2b8797769a/resource/c6f482bf-bf0f-4960-8b2f-9982c211addd/download/interventionscitoyendo.csv", header = TRUE)
summary(crimemtl)
crimemtl_a <- subset(crimemtl,CATEGORIE == "Introduction"|CATEGORIE == "M\xe9fait")
crimemtl_a$offence<-crimemtl_a$CATEGORIE
crimemtl_a$offence<-factor(crimemtl_a$offence,levels = c("Introduction","M\xe9fait","mischief","theft of resident"))
crimemtl_a[crimemtl_a$offence == "M\xe9fait",9]<- 'mischief'
crimemtl_a[crimemtl_a$offence == "Introduction",9]<- 'theft of resident'
crimemtl_a$offence<-factor(crimemtl_a$offence,levels = c("mischief","theft of resident"))
crimemtl_a<-crimemtl_a[!(crimemtl_a$LAT==1),]
crimemtl_a[,7:8]
LonLat<-crimemtl_a[,7:8]
kde <- bkde2D(LonLat,bandwidth=c(0.00225, 0.00225))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat,nlevels = 8)
library(KernSmooth)
LonLat<-crimemtl_a[,7:8]
kde <- bkde2D(LonLat,bandwidth=c(0.00225, 0.00225))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat,nlevels = 8)
## EXTRACT CONTOUR LINE LEVELS
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
;library(sp)
library(sp)
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
## Leaflet map with polygons
im<-leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addRectangles(lng1=min(aa[,1]), lat1=min(aa[,2]),
lng2=max(aa[,1]), lat2=max(aa[,2]),
fillColor = "transparent")
library(sp)
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
library(leaflet)
im<-leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addRectangles(lng1=min(aa[,1]), lat1=min(aa[,2]),
lng2=max(aa[,1]), lat2=max(aa[,2]),
fillColor = "transparent")
## Leaflet map with polygons
library(leaflet)
im<-leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addRectangles(lng1=min(LonLat[,1]), lat1=min(LonLat[,2]),
lng2=max(LonLat[,1]), lat2=max(LonLat[,2]),
fillColor = "transparent")
im
mapview(im)
LonLat<-crimemtl_a[,7:8]
library(KernSmooth)
kde <- bkde2D(LonLat,bandwidth=c(0.00225, 0.00225))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat,nlevels = 8)
## EXTRACT CONTOUR LINE LEVELS
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
library(sp)
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
## Leaflet map with polygons
library(leaflet)
im<-leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addRectangles(lng1=min(LonLat[,1]), lat1=min(LonLat[,2]),
lng2=max(LonLat[,1]), lat2=max(LonLat[,2]),
fillColor = "transparent")
im
mapshot(im, file = "2018-04a1.jpeg")
mapview(im)
library(mapview)
library(webshot)
mapshot(im, file = "2018-04a1.jpeg")
mapview(im)
mapshot(im, file = "2018-04a1.jpeg")
mapview(im)
im<-leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addRectangles(lng1=min(LonLat[,1]), lat1=min(LonLat[,2]),
lng2=max(LonLat[,1]), lat2=max(LonLat[,2]),
fillColor = "transparent")
im
mapshot(im, file = "2018-04a1.jpeg")
mapview(im)
im<-leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS]) %>%
addRectangles(lng1=min(LonLat[,1]), lat1=min(LonLat[,2]),
lng2=max(LonLat[,1]), lat2=max(LonLat[,2]),
fillColor = "transparent")
mapview(im)
mapshot(im, file = "2018-04a1.jpeg")
mapview(im)
? mapshot
region_sums <- crimemtl_a %>%
group_by(DATE) %>%
summarise(count = n())
library(tidyverse)
region_sums <- crimemtl_a %>%
group_by(DATE) %>%
summarise(count = n())
region_sums <- crimemtl_a %>%
group_by(DATE) %>%
summarise(count = n())
library(lubridate)
pass0<-data.frame(date=region_sums$DATE, sum=region_sums$count)
don=xts(x = pass0[,2], order.by = ymd(pass0[,1]))
dygraph(don) %>%
dySeries(label = "Observed", drawPoints = TRUE,pointShape = "square")
library(tidyverse)
region_sums <- crimemtl_a %>%
group_by(DATE) %>%
summarise(count = n())
library(dygraphs)
library(lubridate)
pass0<-data.frame(date=region_sums$DATE, sum=region_sums$count)
don=xts(x = pass0[,2], order.by = ymd(pass0[,1]))
dygraph(don) %>%
dySeries(label = "Observed", drawPoints = TRUE,pointShape = "square")
pass0<-data.frame(date=region_sums$DATE, sum=region_sums$count)
don=xts(x = pass0[,2], order.by = ymd(pass0[,1]))
detach("package:lubridate", unload=TRUE)
pass0<-data.frame(date=region_sums$DATE, sum=region_sums$count)
library(xts)          # To make the convertion data-frame / xts format
don=xts(x = pass0[,2], order.by = ymd(pass0[,1]))
library(dygraphs)
dygraph(don) %>%
dySeries(label = "Observed", drawPoints = TRUE,pointShape = "square")
pass0<-data.frame(date=region_sums$DATE, sum=region_sums$count)
library(xts)          # To make the convertion data-frame / xts format
don=xts(x = pass0[,2], order.by = ymd(pass0[,1]))
library(dygraphs)
dygraph(don) %>%
dySeries(label = "Observed", drawPoints = TRUE,pointShape = "square")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
pass0<-data.frame(date=region_sums$DATE, sum=region_sums$count)
library(xts)          # To make the convertion data-frame / xts format
don=xts(x = pass0[,2], order.by = ymd(pass0[,1]))
library(dygraphs)
dygraph(don) %>%
dySeries(label = "Observed", drawPoints = TRUE,pointShape = "square")
install.packages("mapview")
install.packages("mapview")
devtools::install_github("r-spatial/mapview@develop")
devtools::install_github("r-spatial/mapview@develop")
devtools::install_github("r-spatial/mapview")
devtools::install_github("r-spatial/mapview")
install.packages("mapview")
suppressMessages(library(tidyverse))
library(tidyverse)
library(foreach,parallel,doParallel,)
install.packages(c("foreach", "doParallel"))
cl<-makeCluster(Ncore)
library(foreach,parallel,doParallel,)
library(foreach,doParallel,)
cl<-makeCluster(Ncore)
? makeCluster
registerDoParallel(cl)
detectCores()
> library(parallel)
library(parallel)
detectCores()
? detectCores
detectCores()
detectCores(logical = FALSE)
cl<-makeCluster(Ncore)
library(foreach,doParallel)
cl<-makeCluster(Ncore)
cl<-makeCluster(3)
registerDoParallel(cl)
library(foreach,doParallel)
registerDoParallel(cl)
? registerDoParallel
install.packages("doParallel")
library(doParallel)
registerDoParallel(cl)
knitr::opts_chunk$set(echo = TRUE)
cca_data=read_excel("/Users/sam/GoogleDrive/general/tutor/Maryam/rscript/CCA-Data.xlsx")
cca_data=read_excel("/Users/sam/GoogleDrive/general/tutor/Maryam/rscript/CCA-Data.xlsx")
cca_data=readxl::read_excel("/Users/sam/GoogleDrive/general/tutor/Maryam/rscript/CCA-Data.xlsx")
cca_data_t=as.data.frame(cca_data[,-1])
clusterExport(cl, varlist = c
("cca_data_t","trans0"), envir=environment())
trans0<-function(x){
if(1<x& x<7) x0<- 1
else if(8 <x& x<14) x0<- 2
else if(15 <x& x<21) x0<- 3
else if(22 <x& x<28) x0<- 4
else  x0<- 5
return(x0)
}
clusterExport(cl, varlist = c
("cca_data_t","trans0"), envir=environment())
XT<-parLapply(cl, 1:o, function(exponent) trans0(cca_data_t[[exponent]]))
o<-ncol(cca_data_t)
XT<-parLapply(cl, 1:o, function(exponent) trans0(cca_data_t[[exponent]]))
stopCluster(cl)
XTp<-list()
XT[[i]]
i
XT[[1]]
XT[[2]]
XT
lapply(cca_data_t, trans0)
cca_data_t
lapply(cca_data_t, trans0)
sapply(cca_data_t, trans0)
mapply(cca_data_t, trans0)
? mapply
apply(cca_data_t, MARGIN = c(1,2), FUN = trans0)
unlink("2019-02-24-Crime-Parren_cache", recursive = TRUE)
knit_with_parameters("/Volumes/F/for_my_website/dat0/practice/Crimemtl/2019-02-24-Crime-Parren.Rmd")
