I"(<h2 id="introductory-notes-on-matplotlib">Introductory Notes on Matplotlib</h2>

<h2 id="contents">Contents</h2>
<ul>
  <li><a href="#matplotlib">Matplotlib</a></li>
  <li><a href="#scatter-plot">Scatter plot</a></li>
  <li><a href="#line">line</a></li>
  <li><a href="#Pythonic-approach">Pythonic approach</a></li>
  <li><a href="#subplot">subplot</a></li>
</ul>

<h2 id="matplotlib">Matplotlib</h2>
<p>Python has very advanced tools for plotting, the plot (pyplot) can be done in two different ways; 1) Pythonic: in this approach an empty object oriented is created and plots are built using programs and assigned to the empty object,and 2) non-pythonic: it relies on non-python machines like the package  <code class="language-plaintext highlighter-rouge">matplotlib</code>,  it is very easy to use and good tools for interactive use. A standard shorthands for this module is <code class="language-plaintext highlighter-rouge">import matplotlib.pyplot as plt</code>.</p>

<h2 id="scatter-plot">Scatter plot</h2>
<p>The most commonly used plot is the scatter plot, see the following scripts that generate random number and plot</p>

<p>```{Python, echo = FALSE, message = FALSE}
import matplotlib.pyplot as plt
import numpy as np
n = 100
x = 2 * np.random.rand(n)
y=2*x+np.random.rand(n)
plt.scatter(x, y)
plt.show(block=False)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-1.png" width="350" height="300" /&gt;

The scatter plot can be presented using different [arguments](https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D), the size of point,
colour, [marker](https://matplotlib.org/api/markers_api.html) different character for points.  
```{Python, echo = FALSE, message = FALSE}
colors = np.random.rand(n)
plt.scatter(x, y, s=20 /(x+.4)**2 , c=colors, marker="s")
plt.show(block=False)
</code></pre></div></div>
<p>Now highlight points that
```{Python, echo = FALSE, message = FALSE}
xy=x<strong>2+y</strong>2
select=xy&lt;1
plt.scatter(x, y, alpha=0.3)
plt.scatter(x[select], y[select],facecolor=’none’,edgecolors=’r’)
plt.show()</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-2.png" width="350" height="300" /&gt;


## line
Using ```plt.plot``` can plot the line, to explain let consider timesries: 
```{Python, echo = FALSE, message = FALSE}
import pandas as pd 
x=pd.period_range('2019-11-06', periods=12*10,freq='M').to_timestamp()
y = np.random.randn(len(x)).cumsum()
y=abs(min(y))+y
plt.plot(x, y, label='ED')
plt.title('Example Data') 
plt.xlabel('Date') 
plt.ylabel('Y')
plt.grid(True)
plt.figtext(1,0, 'note',ha='right', va='bottom')
plt.legend(loc='best', framealpha=0.5,prop={'size':'small'})
plt.tight_layout(pad=1)
plt.gcf().set_size_inches(10, 5)
plt.show(block=False)
plt.close()
</code></pre></div></div>
<p><img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-3.png" width="350" height="300" /></p>

<p>Example: Write a function to plot the following function
\(f(x) =
  \begin{cases}
    sin(x),       &amp; x\leq \pi/2,\\
    cos(x)  &amp; x&gt; \pi/2.\\
  \end{cases}\)</p>

<p>```{Python, echo = FALSE, message = FALSE}
x=np.arange(0,np.pi,np.pi/100)
y=np.where(x&lt;np.pi/2,np.cos(x),np.sin(x))
plt.plot(x,y)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-4.png" width="350" height="300" /&gt;


The other approach is to use two function instead one, it can be done using the following script,   

```{Python, echo = FALSE, message = FALSE}
x=np.arange(0,np.pi,np.pi/100)
y=np.where(x&lt;np.pi/2,np.cos(x),np.sin(x))
x0=x[x&lt;np.pi/2]
plt.plot(x0,np.cos(x0), linestyle='--',label='cos(x)')
plt.axis([0,np.pi,0,1])
x1=x[(x&gt;=np.pi/2)]
plt.plot(x1,np.sin(x1), linestyle='--',label='sin(x)')
plt.legend()
# it can be done using
# plt.plot(x0,np.cos(x0), '--',x1,np.sin(x1), '--')
</code></pre></div></div>
<p><img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-5.png" width="350" height="300" /></p>

<p>The argument <code class="language-plaintext highlighter-rouge">plt.axis()</code> defines axes limits, it can also be done using  <code class="language-plaintext highlighter-rouge">plt.xlim(,)</code>, <code class="language-plaintext highlighter-rouge">plt.ylim(,)</code>.  The style of line is define in <code class="language-plaintext highlighter-rouge">'--'</code>, other styles are</p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>’-‘ or ‘solid’</td>
      <td>solid line</td>
    </tr>
    <tr>
      <td>’–’ or ‘dashed’</td>
      <td>dashed line</td>
    </tr>
    <tr>
      <td>’-.’ or ‘dashdot’</td>
      <td>dash-dotted line</td>
    </tr>
    <tr>
      <td>’:’ or ‘dotted’</td>
      <td>dotted line</td>
    </tr>
    <tr>
      <td>‘None’ or ‘ ‘</td>
      <td>draw nothing</td>
    </tr>
  </tbody>
</table>

<p>There are more options for axis, for instance <code class="language-plaintext highlighter-rouge">plt.axis('equal')</code>  and  <code class="language-plaintext highlighter-rouge">plt.axis('tight')</code>.</p>

<p>The labels and title can be added to plot using <code class="language-plaintext highlighter-rouge">plt.axes()</code>,
```{Python, echo = FALSE, message = FALSE}
plt.axes(xlim=(0, 10), ylim=(-2, 2),xlabel=’x’, ylabel=’sin(x)’, title=’A Simple Plot’)
plt.plot(x, np.sin(x), ‘-‘)
plt.show(block=False)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
The following plot lines with different markers

```{Python, echo = FALSE, message = FALSE}
n = 15
linestyles = ['-', '--', '-.', ':']
markers = list('ov^&lt;&gt;8sp*hHDdPX')
x = np.linspace(0, 100, 10)
for i in range(n): 
  y = x + x/5*i + i
  st = linestyles[i % len(linestyles)]
  ma = markers[i % len(markers)] 
  plt.plot(x, y,label='Line '+str(i+1)+' '+st+ma, marker=ma,linestyle=st)

plt.grid(True)
plt.axis('tight')
plt.legend(loc='best', prop={'size':'small'}) 
plt.show(block=False)
</code></pre></div></div>
<p><img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-6.png" width="350" height="300" /></p>

<p>The legend can be moved to different positions.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.legend(bbox_to_anchor=(1, 0.5), loc='center left', prop={'size':'small'}) 
plt.legend(bbox_to_anchor=(0.5, -0.05),loc='upper center', ncol=8, prop={'size':'small'})
</code></pre></div></div>
<p><img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-7.png" width="350" height="300" /></p>

<p><img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-8.png" width="350" height="300" /></p>

<p>Note: if you want to save the figure to a file, put the script
between
```{Python, echo = FALSE, message = FALSE}
fig = plt.figure()
fig.savefig(‘name.png’)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


## Pythonic approach
The following codes show how pythonic approach can be applied to generate several plots; first generate an empty figure from the global Figure factory, then generate your plots and assign to figure. 

```{Python, echo = FALSE, message = FALSE}
fig = plt.figure()
for i in range(1,10):
  x=pd.period_range('2019-11-06', periods=12*10,freq='M').to_timestamp()
  y = np.random.randn(len(x)).cumsum()
  y=abs(min(y))+y
  plt.plot(x, y, label='ED%s'%i)
  plt.title('Example Data') 
  plt.xlabel('Date') 
  plt.ylabel('Y')
  plt.grid(True)
  plt.legend(loc='best', framealpha=0.5,prop={'size':'small'})
  fig = plt.figure(i) # get the figure
plt.show(block=False)
</code></pre></div></div>

<p>you can close figures according the number <code class="language-plaintext highlighter-rouge">plt.close(fig.number)</code>,  all figures <code class="language-plaintext highlighter-rouge">plt.close(all)</code>,  ro the current one <code class="language-plaintext highlighter-rouge">plt.close()</code></p>

<h2 id="subplot">subplot</h2>
<p>Figures can be plotted in one figure using <code class="language-plaintext highlighter-rouge">.subplot(#row,#col,position)</code>,</p>

<p>```{Python, echo = FALSE, message = FALSE}
x = np.linspace(0, 16, 800)
plt.subplot(2, 2, 1)
plt.plot(x, np.sin(x))
plt.title(“Fig1”)
plt.xlim(0,1.5<em>np.pi)
plt.xlabel(“X-axis”)
plt.ylabel(“sin(x)”)
plt.subplot(2, 2, 2)
plt.plot(x, np.cos(x))
plt.subplot(2, 2, 3)
plt.plot(x, np.sin(x)</em>np.cos(x))
plt.subplot(2, 2, 4)
plt.plot(x, np.sin(x)+np.cos(x))
plt.show(block=False)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-9.png" width="350" height="300" /&gt;

You can not use `plt.axes()` for subplot. 


Example: Fit a linear model to a sample data.  
</code></pre></div></div>
<p>x = np.random.randn(100)
y = x + np.random.randn(100)
fig, ax = plt.subplots() 
ax.scatter(x, y, alpha=0.5, color=’orchid’) 
fig.suptitle(‘Scatter Plot’) 
fig.tight_layout(pad=2);
ax.grid(True)
fit = np.polyfit(x, y, deg=1) 
ax.plot(x, fit[0]*x + fit[1], ‘-‘,color=’red’, linewidth=2)
```
<img src="https://raw.githubusercontent.com/saeidamiri1/pythonseum/master/public/image/Figure-2019-12-30-plot-10.png" width="350" height="300" /></p>

<p><strong><a href="#contents">⬆ back to top</a></strong></p>
<h3 id="license">License</h3>
<p>Copyright (c) 2019 Saeid Amiri</p>
:ET